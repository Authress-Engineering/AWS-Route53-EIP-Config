{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description": "Route53 Config rule for EIP",
  "Parameters": {},

  "Resources": {
    "AWSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Loads S3 Explorer Configuration into bucket",
        "FunctionName": { "Fn::Sub": "${AWS::StackName}-${AWS::Region}-lambda" },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["AWSLambdaExecutionRole", "Arn"] },
        "Timeout": 10,
        "Runtime": "nodejs14.x",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html",
                "const aws = require('aws-sdk');",
                "const cloudFormationResponseHandler = require('cfn-response');",
                "exports.handler = function (event, context) {",
                "  let bucketName = event.ResourceProperties.BucketName;",
                "  let cognitoPoolId = event.ResourceProperties.CognitoPoolId;",
                "  let applicationLoginUrl = event.ResourceProperties.LoginUrl;",
                "  let applicationClientId = event.ResourceProperties.ApplicationClientId;",
                "  let identityPoolId = event.ResourceProperties.IdentityPoolId;",
                "  let awsAccountId = event.ResourceProperties.AwsAccountId;",
                "  let s3client = new aws.S3();",
                "  if (event.RequestType === 'Delete') {",
                "    s3client.deleteObject({ Bucket: bucketName, Key: 'configuration.json' }).promise()",
                "      .then(() => {",
                "        cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS, { title: 'Configuration Deleted' });",
                "      })",
                "      .catch(error => {",
                "        cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS, { title: 'Failed to delete configuration, failing gracefully.', error: error.message || error.toString() || error });",
                "      });",
                "    return;",
                "  } ",
                "  s3client.putObject({ Bucket: bucketName, Key: 'configuration.json', Body: Buffer.from(JSON.stringify({ cognitoPoolId, applicationLoginUrl, applicationClientId, awsAccountId, identityPoolId })), ContentType: 'application/json' }).promise()",
                "    .then(() => {",
                "      cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS, { title: 'Configuration updated' });",
                "    })",
                "    .catch(error => {",
                "      cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.FAILED, { title: 'Failed to write configuration', error: error.message || error.toString() || error });",
                "    });",
                "}"
              ]
            ]
          }
        }
      }
    },

    "AWSLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": { "Fn::Sub": "${AWS::StackName}-${AWS::Region}-AWSLambda-CW" }
          }
        ],
        "RoleName": { "Fn::Sub": "${AWS::StackName}-${AWS::Region}-Route53-EIP-Config-Lambda" }
      }
    }
  },

  "Outputs": {
    "ConfigRuleId": {
      "Description": "Config Rule ID",
      "Value": { "Ref": "AWSLambdaExecutionRole" }
    }
  }
}
